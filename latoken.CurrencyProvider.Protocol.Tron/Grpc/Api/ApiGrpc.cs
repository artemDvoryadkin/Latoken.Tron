// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api/api.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api {
  public static partial class Wallet
  {
    static readonly string __ServiceName = "protocol.Wallet";

    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> __Marshaller_Account = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract> __Marshaller_TransferContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Marshaller_Transaction = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Marshaller_TransactionExtention = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return> __Marshaller_Return = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract> __Marshaller_AccountUpdateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract> __Marshaller_SetAccountIdContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract> __Marshaller_VoteWitnessContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract> __Marshaller_UpdateSettingContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract> __Marshaller_AssetIssueContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract> __Marshaller_WitnessUpdateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract> __Marshaller_AccountCreateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract> __Marshaller_WitnessCreateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract> __Marshaller_TransferAssetContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract> __Marshaller_ParticipateAssetIssueContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract> __Marshaller_FreezeBalanceContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract> __Marshaller_UnfreezeBalanceContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract> __Marshaller_UnfreezeAssetContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract> __Marshaller_WithdrawBalanceContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract> __Marshaller_UpdateAssetContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract> __Marshaller_ProposalCreateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract> __Marshaller_ProposalApproveContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract> __Marshaller_ProposalDeleteContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract> __Marshaller_BuyStorageContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract> __Marshaller_BuyStorageBytesContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract> __Marshaller_SellStorageContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList> __Marshaller_NodeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> __Marshaller_AssetIssueList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage> __Marshaller_AccountNetMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage> __Marshaller_AccountResourceMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage> __Marshaller_BytesMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Marshaller_Block = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> __Marshaller_BlockExtention = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> __Marshaller_NumberMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit> __Marshaller_BlockLimit = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> __Marshaller_BlockList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> __Marshaller_BlockListExtention = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract> __Marshaller_CreateSmartContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract> __Marshaller_SmartContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract> __Marshaller_TriggerSmartContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> __Marshaller_WitnessList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList> __Marshaller_ProposalList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal> __Marshaller_Proposal = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters> __Marshaller_ChainParameters = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage> __Marshaller_PaginatedMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign> __Marshaller_TransactionSign = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage> __Marshaller_EasyTransferMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> __Marshaller_EasyTransferResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage> __Marshaller_EasyTransferByPrivateMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> __Marshaller_AddressPrKeyPairMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> __Marshaller_TransactionInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo.Parser.ParseFrom);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> __Method_GetAccount = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_Account,
        __Marshaller_Account);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> __Method_GetAccountById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountById",
        __Marshaller_Account,
        __Marshaller_Account);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_CreateTransaction = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTransaction",
        __Marshaller_TransferContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_CreateTransaction2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTransaction2",
        __Marshaller_TransferContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return> __Method_BroadcastTransaction = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastTransaction",
        __Marshaller_Transaction,
        __Marshaller_Return);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_UpdateAccount = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccount",
        __Marshaller_AccountUpdateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_SetAccountId = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAccountId",
        __Marshaller_SetAccountIdContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_UpdateAccount2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccount2",
        __Marshaller_AccountUpdateContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_VoteWitnessAccount = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoteWitnessAccount",
        __Marshaller_VoteWitnessContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_UpdateSetting = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSetting",
        __Marshaller_UpdateSettingContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_VoteWitnessAccount2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoteWitnessAccount2",
        __Marshaller_VoteWitnessContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_CreateAssetIssue = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAssetIssue",
        __Marshaller_AssetIssueContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_CreateAssetIssue2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAssetIssue2",
        __Marshaller_AssetIssueContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_UpdateWitness = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWitness",
        __Marshaller_WitnessUpdateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_UpdateWitness2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWitness2",
        __Marshaller_WitnessUpdateContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_CreateAccount = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_AccountCreateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_CreateAccount2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount2",
        __Marshaller_AccountCreateContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_CreateWitness = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWitness",
        __Marshaller_WitnessCreateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_CreateWitness2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWitness2",
        __Marshaller_WitnessCreateContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_TransferAsset = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferAsset",
        __Marshaller_TransferAssetContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_TransferAsset2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferAsset2",
        __Marshaller_TransferAssetContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_ParticipateAssetIssue = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ParticipateAssetIssue",
        __Marshaller_ParticipateAssetIssueContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_ParticipateAssetIssue2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ParticipateAssetIssue2",
        __Marshaller_ParticipateAssetIssueContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_FreezeBalance = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FreezeBalance",
        __Marshaller_FreezeBalanceContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_FreezeBalance2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FreezeBalance2",
        __Marshaller_FreezeBalanceContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_UnfreezeBalance = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeBalance",
        __Marshaller_UnfreezeBalanceContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_UnfreezeBalance2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeBalance2",
        __Marshaller_UnfreezeBalanceContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_UnfreezeAsset = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeAsset",
        __Marshaller_UnfreezeAssetContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_UnfreezeAsset2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeAsset2",
        __Marshaller_UnfreezeAssetContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_WithdrawBalance = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawBalance",
        __Marshaller_WithdrawBalanceContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_WithdrawBalance2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawBalance2",
        __Marshaller_WithdrawBalanceContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_UpdateAsset = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAsset",
        __Marshaller_UpdateAssetContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_UpdateAsset2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAsset2",
        __Marshaller_UpdateAssetContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_ProposalCreate = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProposalCreate",
        __Marshaller_ProposalCreateContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_ProposalApprove = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProposalApprove",
        __Marshaller_ProposalApproveContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_ProposalDelete = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProposalDelete",
        __Marshaller_ProposalDeleteContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_BuyStorage = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BuyStorage",
        __Marshaller_BuyStorageContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_BuyStorageBytes = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BuyStorageBytes",
        __Marshaller_BuyStorageBytesContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_SellStorage = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SellStorage",
        __Marshaller_SellStorageContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList> __Method_ListNodes = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNodes",
        __Marshaller_EmptyMessage,
        __Marshaller_NodeList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> __Method_GetAssetIssueByAccount = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueByAccount",
        __Marshaller_Account,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage> __Method_GetAccountNet = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountNet",
        __Marshaller_Account,
        __Marshaller_AccountNetMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage> __Method_GetAccountResource = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountResource",
        __Marshaller_Account,
        __Marshaller_AccountResourceMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract> __Method_GetAssetIssueByName = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueByName",
        __Marshaller_BytesMessage,
        __Marshaller_AssetIssueContract);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Method_GetNowBlock = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_EmptyMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> __Method_GetNowBlock2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock2",
        __Marshaller_EmptyMessage,
        __Marshaller_BlockExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Method_GetBlockByNum = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_NumberMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> __Method_GetBlockByNum2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum2",
        __Marshaller_NumberMessage,
        __Marshaller_BlockExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> __Method_GetTransactionCountByBlockNum = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionCountByBlockNum",
        __Marshaller_NumberMessage,
        __Marshaller_NumberMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Method_GetBlockById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockById",
        __Marshaller_BytesMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> __Method_GetBlockByLimitNext = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLimitNext",
        __Marshaller_BlockLimit,
        __Marshaller_BlockList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> __Method_GetBlockByLimitNext2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLimitNext2",
        __Marshaller_BlockLimit,
        __Marshaller_BlockListExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> __Method_GetBlockByLatestNum = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLatestNum",
        __Marshaller_NumberMessage,
        __Marshaller_BlockList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> __Method_GetBlockByLatestNum2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLatestNum2",
        __Marshaller_NumberMessage,
        __Marshaller_BlockListExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_GetTransactionById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionById",
        __Marshaller_BytesMessage,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_DeployContract = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeployContract",
        __Marshaller_CreateSmartContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract> __Method_GetContract = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContract",
        __Marshaller_BytesMessage,
        __Marshaller_SmartContract);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_TriggerContract = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TriggerContract",
        __Marshaller_TriggerSmartContract,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> __Method_ListWitnesses = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWitnesses",
        __Marshaller_EmptyMessage,
        __Marshaller_WitnessList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList> __Method_ListProposals = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProposals",
        __Marshaller_EmptyMessage,
        __Marshaller_ProposalList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal> __Method_GetProposalById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProposalById",
        __Marshaller_BytesMessage,
        __Marshaller_Proposal);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters> __Method_GetChainParameters = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChainParameters",
        __Marshaller_EmptyMessage,
        __Marshaller_ChainParameters);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> __Method_GetAssetIssueList = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueList",
        __Marshaller_EmptyMessage,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> __Method_GetPaginatedAssetIssueList = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPaginatedAssetIssueList",
        __Marshaller_PaginatedMessage,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> __Method_TotalTransaction = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalTransaction",
        __Marshaller_EmptyMessage,
        __Marshaller_NumberMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> __Method_GetNextMaintenanceTime = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNextMaintenanceTime",
        __Marshaller_EmptyMessage,
        __Marshaller_NumberMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_GetTransactionSign = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionSign",
        __Marshaller_TransactionSign,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> __Method_GetTransactionSign2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionSign2",
        __Marshaller_TransactionSign,
        __Marshaller_TransactionExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage> __Method_CreateAddress = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAddress",
        __Marshaller_BytesMessage,
        __Marshaller_BytesMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> __Method_EasyTransfer = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EasyTransfer",
        __Marshaller_EasyTransferMessage,
        __Marshaller_EasyTransferResponse);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> __Method_EasyTransferByPrivate = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EasyTransferByPrivate",
        __Marshaller_EasyTransferByPrivateMessage,
        __Marshaller_EasyTransferResponse);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> __Method_GenerateAddress = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAddress",
        __Marshaller_EmptyMessage,
        __Marshaller_AddressPrKeyPairMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> __Method_GetTransactionInfoById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionInfoById",
        __Marshaller_BytesMessage,
        __Marshaller_TransactionInfo);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Wallet</summary>
    public abstract partial class WalletBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateTransaction2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return> BroadcastTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> SetAccountId(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> VoteWitnessAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateSetting(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> VoteWitnessAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateAssetIssue(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateAssetIssue2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateWitness(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateWitness2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateWitness(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateWitness2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> TransferAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> TransferAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> ParticipateAssetIssue(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ParticipateAssetIssue2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> FreezeBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> FreezeBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UnfreezeBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UnfreezeBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UnfreezeAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UnfreezeAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> WithdrawBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> WithdrawBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalCreate(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalApprove(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalDelete(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> BuyStorage(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> BuyStorageBytes(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> SellStorage(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList> ListNodes(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueByAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage> GetAccountNet(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage> GetAccountResource(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract> GetAssetIssueByName(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetNowBlock2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetBlockByNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetTransactionCountByBlockNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> GetBlockByLimitNext(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> GetBlockByLimitNext2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> GetBlockByLatestNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> GetBlockByLatestNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> DeployContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract> GetContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> TriggerContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> ListWitnesses(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList> ListProposals(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal> GetProposalById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters> GetChainParameters(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetPaginatedAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> TotalTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetNextMaintenanceTime(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionSign(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> GetTransactionSign2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage> CreateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> EasyTransfer(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> EasyTransferByPrivate(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> GenerateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> GetTransactionInfoById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Wallet</summary>
    public partial class WalletClient : grpc::ClientBase<WalletClient>
    {
      /// <summary>Creates a new client for Wallet</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Wallet that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccountById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccountById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountById, null, options, request);
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTransaction, null, options, request);
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateTransactionAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateTransactionAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTransaction, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateTransaction2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransaction2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateTransaction2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTransaction2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateTransaction2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransaction2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateTransaction2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTransaction2, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return BroadcastTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return BroadcastTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return> BroadcastTransactionAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.Return> BroadcastTransactionAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastTransaction, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UpdateAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UpdateAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction SetAccountId(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAccountId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction SetAccountId(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAccountId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> SetAccountIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAccountIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> SetAccountIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SetAccountIdContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAccountId, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccount2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccount2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateAccount2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccount2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateAccount2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccount2, null, options, request);
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction VoteWitnessAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction VoteWitnessAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoteWitnessAccount, null, options, request);
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> VoteWitnessAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> VoteWitnessAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoteWitnessAccount, null, options, request);
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateSetting(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSetting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateSetting(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSetting, null, options, request);
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateSettingAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSettingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateSettingAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateSettingContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSetting, null, options, request);
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention VoteWitnessAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccount2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention VoteWitnessAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoteWitnessAccount2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> VoteWitnessAccount2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccount2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> VoteWitnessAccount2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoteWitnessAccount2, null, options, request);
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateAssetIssue(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateAssetIssue(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateAssetIssueAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateAssetIssueAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateAssetIssue2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssue2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateAssetIssue2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateAssetIssue2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssue2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateAssetIssue2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UpdateWitness(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitness(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UpdateWitness(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWitness, null, options, request);
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateWitnessAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitnessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateWitnessAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWitness, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateWitness2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitness2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateWitness2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWitness2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateWitness2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitness2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateWitness2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWitness2, null, options, request);
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateAccount2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateAccount2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateAccount2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount2, null, options, request);
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateWitness(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitness(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction CreateWitness(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWitness, null, options, request);
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateWitnessAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitnessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> CreateWitnessAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWitness, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateWitness2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitness2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention CreateWitness2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWitness2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateWitness2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitness2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> CreateWitness2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWitness2, null, options, request);
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction TransferAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction TransferAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferAsset, null, options, request);
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> TransferAssetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> TransferAssetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferAsset, null, options, request);
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention TransferAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsset2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention TransferAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferAsset2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> TransferAsset2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsset2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> TransferAsset2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferAsset2, null, options, request);
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction ParticipateAssetIssue(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction ParticipateAssetIssue(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ParticipateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> ParticipateAssetIssueAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> ParticipateAssetIssueAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ParticipateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ParticipateAssetIssue2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssue2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ParticipateAssetIssue2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ParticipateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ParticipateAssetIssue2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssue2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ParticipateAssetIssue2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ParticipateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction FreezeBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction FreezeBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FreezeBalance, null, options, request);
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> FreezeBalanceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> FreezeBalanceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FreezeBalance, null, options, request);
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention FreezeBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalance2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention FreezeBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> FreezeBalance2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalance2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> FreezeBalance2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UnfreezeBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UnfreezeBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeBalance, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UnfreezeBalanceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UnfreezeBalanceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeBalance, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UnfreezeBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalance2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UnfreezeBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UnfreezeBalance2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalance2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UnfreezeBalance2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UnfreezeAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UnfreezeAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeAsset, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UnfreezeAssetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UnfreezeAssetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeAsset, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UnfreezeAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsset2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UnfreezeAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeAsset2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UnfreezeAsset2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsset2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UnfreezeAsset2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeAsset2, null, options, request);
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction WithdrawBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction WithdrawBalance(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawBalance, null, options, request);
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> WithdrawBalanceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> WithdrawBalanceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawBalance, null, options, request);
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention WithdrawBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalance2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention WithdrawBalance2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawBalance2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> WithdrawBalance2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalance2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> WithdrawBalance2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawBalance2, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UpdateAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction UpdateAsset(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateAssetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> UpdateAssetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention UpdateAsset2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAsset2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateAsset2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> UpdateAsset2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAsset2, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ProposalCreate(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalCreate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ProposalCreate(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProposalCreate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalCreateAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalCreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalCreateAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProposalCreate, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ProposalApprove(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalApprove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ProposalApprove(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProposalApprove, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalApproveAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalApproveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalApproveAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalApproveContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProposalApprove, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ProposalDelete(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention ProposalDelete(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProposalDelete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalDeleteAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> ProposalDeleteAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ProposalDeleteContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProposalDelete, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention BuyStorage(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention BuyStorage(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BuyStorage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> BuyStorageAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> BuyStorageAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BuyStorage, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention BuyStorageBytes(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorageBytes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention BuyStorageBytes(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BuyStorageBytes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> BuyStorageBytesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorageBytesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> BuyStorageBytesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.BuyStorageBytesContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BuyStorageBytes, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention SellStorage(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SellStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention SellStorage(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SellStorage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> SellStorageAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SellStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> SellStorageAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SellStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SellStorage, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList ListNodes(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList ListNodes(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNodes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList> ListNodesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NodeList> ListNodesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNodes, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetAssetIssueByAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetAssetIssueByAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueByAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueByAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueByAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueByAccount, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage GetAccountNet(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountNet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage GetAccountNet(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountNet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage> GetAccountNetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountNetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountNetMessage> GetAccountNetAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountNet, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage GetAccountResource(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage GetAccountResource(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountResource, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage> GetAccountResourceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountResourceMessage> GetAccountResourceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountResource, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract GetAssetIssueByName(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract GetAssetIssueByName(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract> GetAssetIssueByNameAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.AssetIssueContract> GetAssetIssueByNameAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlockAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlockAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetNowBlock2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetNowBlock2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetNowBlock2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetNowBlock2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetBlockByNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetBlockByNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetBlockByNum2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetBlockByNum2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage GetTransactionCountByBlockNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage GetTransactionCountByBlockNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetTransactionCountByBlockNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetTransactionCountByBlockNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockById, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList GetBlockByLimitNext(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNext(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList GetBlockByLimitNext(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLimitNext, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> GetBlockByLimitNextAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> GetBlockByLimitNextAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLimitNext, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention GetBlockByLimitNext2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNext2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention GetBlockByLimitNext2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLimitNext2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> GetBlockByLimitNext2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNext2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> GetBlockByLimitNext2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLimitNext2, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList GetBlockByLatestNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList GetBlockByLatestNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLatestNum, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> GetBlockByLatestNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockList> GetBlockByLatestNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLatestNum, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention GetBlockByLatestNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNum2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention GetBlockByLatestNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLatestNum2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> GetBlockByLatestNum2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNum2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockListExtention> GetBlockByLatestNum2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLatestNum2, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction GetTransactionById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction GetTransactionById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention DeployContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention DeployContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeployContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> DeployContractAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> DeployContractAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.CreateSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeployContract, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract GetContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract GetContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract> GetContractAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.SmartContract> GetContractAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContract, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention TriggerContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention TriggerContract(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TriggerContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> TriggerContractAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> TriggerContractAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TriggerContract, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList ListWitnesses(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnesses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList ListWitnesses(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> ListWitnessesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnessesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> ListWitnessesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList ListProposals(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProposals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList ListProposals(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProposals, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList> ListProposalsAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProposalsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ProposalList> ListProposalsAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProposals, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal GetProposalById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProposalById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal GetProposalById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProposalById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal> GetProposalByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProposalByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Proposal> GetProposalByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProposalById, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters GetChainParameters(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters GetChainParameters(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChainParameters, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters> GetChainParametersAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.ChainParameters> GetChainParametersAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChainParameters, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetPaginatedAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetPaginatedAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetPaginatedAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetPaginatedAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage TotalTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage TotalTransaction(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> TotalTransactionAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> TotalTransactionAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalTransaction, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage GetNextMaintenanceTime(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextMaintenanceTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage GetNextMaintenanceTime(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNextMaintenanceTime, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetNextMaintenanceTimeAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextMaintenanceTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetNextMaintenanceTimeAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNextMaintenanceTime, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction GetTransactionSign(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction GetTransactionSign(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionSign, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionSignAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionSignAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionSign, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention GetTransactionSign2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSign2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention GetTransactionSign2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionSign2, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> GetTransactionSign2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSign2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionExtention> GetTransactionSign2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionSign2, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage CreateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage CreateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage> CreateAddressAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage> CreateAddressAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse EasyTransfer(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse EasyTransfer(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EasyTransfer, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> EasyTransferAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> EasyTransferAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EasyTransfer, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse EasyTransferByPrivate(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferByPrivate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse EasyTransferByPrivate(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EasyTransferByPrivate, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> EasyTransferByPrivateAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferByPrivateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferResponse> EasyTransferByPrivateAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EasyTransferByPrivateMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EasyTransferByPrivate, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage GenerateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage GenerateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> GenerateAddressAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> GenerateAddressAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo GetTransactionInfoById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo GetTransactionInfoById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> GetTransactionInfoByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> GetTransactionInfoByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WalletBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_GetAccountById, serviceImpl.GetAccountById)
          .AddMethod(__Method_CreateTransaction, serviceImpl.CreateTransaction)
          .AddMethod(__Method_CreateTransaction2, serviceImpl.CreateTransaction2)
          .AddMethod(__Method_BroadcastTransaction, serviceImpl.BroadcastTransaction)
          .AddMethod(__Method_UpdateAccount, serviceImpl.UpdateAccount)
          .AddMethod(__Method_SetAccountId, serviceImpl.SetAccountId)
          .AddMethod(__Method_UpdateAccount2, serviceImpl.UpdateAccount2)
          .AddMethod(__Method_VoteWitnessAccount, serviceImpl.VoteWitnessAccount)
          .AddMethod(__Method_UpdateSetting, serviceImpl.UpdateSetting)
          .AddMethod(__Method_VoteWitnessAccount2, serviceImpl.VoteWitnessAccount2)
          .AddMethod(__Method_CreateAssetIssue, serviceImpl.CreateAssetIssue)
          .AddMethod(__Method_CreateAssetIssue2, serviceImpl.CreateAssetIssue2)
          .AddMethod(__Method_UpdateWitness, serviceImpl.UpdateWitness)
          .AddMethod(__Method_UpdateWitness2, serviceImpl.UpdateWitness2)
          .AddMethod(__Method_CreateAccount, serviceImpl.CreateAccount)
          .AddMethod(__Method_CreateAccount2, serviceImpl.CreateAccount2)
          .AddMethod(__Method_CreateWitness, serviceImpl.CreateWitness)
          .AddMethod(__Method_CreateWitness2, serviceImpl.CreateWitness2)
          .AddMethod(__Method_TransferAsset, serviceImpl.TransferAsset)
          .AddMethod(__Method_TransferAsset2, serviceImpl.TransferAsset2)
          .AddMethod(__Method_ParticipateAssetIssue, serviceImpl.ParticipateAssetIssue)
          .AddMethod(__Method_ParticipateAssetIssue2, serviceImpl.ParticipateAssetIssue2)
          .AddMethod(__Method_FreezeBalance, serviceImpl.FreezeBalance)
          .AddMethod(__Method_FreezeBalance2, serviceImpl.FreezeBalance2)
          .AddMethod(__Method_UnfreezeBalance, serviceImpl.UnfreezeBalance)
          .AddMethod(__Method_UnfreezeBalance2, serviceImpl.UnfreezeBalance2)
          .AddMethod(__Method_UnfreezeAsset, serviceImpl.UnfreezeAsset)
          .AddMethod(__Method_UnfreezeAsset2, serviceImpl.UnfreezeAsset2)
          .AddMethod(__Method_WithdrawBalance, serviceImpl.WithdrawBalance)
          .AddMethod(__Method_WithdrawBalance2, serviceImpl.WithdrawBalance2)
          .AddMethod(__Method_UpdateAsset, serviceImpl.UpdateAsset)
          .AddMethod(__Method_UpdateAsset2, serviceImpl.UpdateAsset2)
          .AddMethod(__Method_ProposalCreate, serviceImpl.ProposalCreate)
          .AddMethod(__Method_ProposalApprove, serviceImpl.ProposalApprove)
          .AddMethod(__Method_ProposalDelete, serviceImpl.ProposalDelete)
          .AddMethod(__Method_BuyStorage, serviceImpl.BuyStorage)
          .AddMethod(__Method_BuyStorageBytes, serviceImpl.BuyStorageBytes)
          .AddMethod(__Method_SellStorage, serviceImpl.SellStorage)
          .AddMethod(__Method_ListNodes, serviceImpl.ListNodes)
          .AddMethod(__Method_GetAssetIssueByAccount, serviceImpl.GetAssetIssueByAccount)
          .AddMethod(__Method_GetAccountNet, serviceImpl.GetAccountNet)
          .AddMethod(__Method_GetAccountResource, serviceImpl.GetAccountResource)
          .AddMethod(__Method_GetAssetIssueByName, serviceImpl.GetAssetIssueByName)
          .AddMethod(__Method_GetNowBlock, serviceImpl.GetNowBlock)
          .AddMethod(__Method_GetNowBlock2, serviceImpl.GetNowBlock2)
          .AddMethod(__Method_GetBlockByNum, serviceImpl.GetBlockByNum)
          .AddMethod(__Method_GetBlockByNum2, serviceImpl.GetBlockByNum2)
          .AddMethod(__Method_GetTransactionCountByBlockNum, serviceImpl.GetTransactionCountByBlockNum)
          .AddMethod(__Method_GetBlockById, serviceImpl.GetBlockById)
          .AddMethod(__Method_GetBlockByLimitNext, serviceImpl.GetBlockByLimitNext)
          .AddMethod(__Method_GetBlockByLimitNext2, serviceImpl.GetBlockByLimitNext2)
          .AddMethod(__Method_GetBlockByLatestNum, serviceImpl.GetBlockByLatestNum)
          .AddMethod(__Method_GetBlockByLatestNum2, serviceImpl.GetBlockByLatestNum2)
          .AddMethod(__Method_GetTransactionById, serviceImpl.GetTransactionById)
          .AddMethod(__Method_DeployContract, serviceImpl.DeployContract)
          .AddMethod(__Method_GetContract, serviceImpl.GetContract)
          .AddMethod(__Method_TriggerContract, serviceImpl.TriggerContract)
          .AddMethod(__Method_ListWitnesses, serviceImpl.ListWitnesses)
          .AddMethod(__Method_ListProposals, serviceImpl.ListProposals)
          .AddMethod(__Method_GetProposalById, serviceImpl.GetProposalById)
          .AddMethod(__Method_GetChainParameters, serviceImpl.GetChainParameters)
          .AddMethod(__Method_GetAssetIssueList, serviceImpl.GetAssetIssueList)
          .AddMethod(__Method_GetPaginatedAssetIssueList, serviceImpl.GetPaginatedAssetIssueList)
          .AddMethod(__Method_TotalTransaction, serviceImpl.TotalTransaction)
          .AddMethod(__Method_GetNextMaintenanceTime, serviceImpl.GetNextMaintenanceTime)
          .AddMethod(__Method_GetTransactionSign, serviceImpl.GetTransactionSign)
          .AddMethod(__Method_GetTransactionSign2, serviceImpl.GetTransactionSign2)
          .AddMethod(__Method_CreateAddress, serviceImpl.CreateAddress)
          .AddMethod(__Method_EasyTransfer, serviceImpl.EasyTransfer)
          .AddMethod(__Method_EasyTransferByPrivate, serviceImpl.EasyTransferByPrivate)
          .AddMethod(__Method_GenerateAddress, serviceImpl.GenerateAddress)
          .AddMethod(__Method_GetTransactionInfoById, serviceImpl.GetTransactionInfoById).Build();
    }

  }
  public static partial class WalletSolidity
  {
    static readonly string __ServiceName = "protocol.WalletSolidity";

    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> __Marshaller_Account = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> __Marshaller_WitnessList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> __Marshaller_AssetIssueList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage> __Marshaller_PaginatedMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Marshaller_Block = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> __Marshaller_BlockExtention = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> __Marshaller_NumberMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage> __Marshaller_BytesMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Marshaller_Transaction = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> __Marshaller_TransactionInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> __Marshaller_AddressPrKeyPairMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> __Method_GetAccount = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_Account,
        __Marshaller_Account);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> __Method_GetAccountById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountById",
        __Marshaller_Account,
        __Marshaller_Account);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> __Method_ListWitnesses = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWitnesses",
        __Marshaller_EmptyMessage,
        __Marshaller_WitnessList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> __Method_GetAssetIssueList = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueList",
        __Marshaller_EmptyMessage,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> __Method_GetPaginatedAssetIssueList = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPaginatedAssetIssueList",
        __Marshaller_PaginatedMessage,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Method_GetNowBlock = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_EmptyMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> __Method_GetNowBlock2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock2",
        __Marshaller_EmptyMessage,
        __Marshaller_BlockExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Method_GetBlockByNum = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_NumberMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> __Method_GetBlockByNum2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum2",
        __Marshaller_NumberMessage,
        __Marshaller_BlockExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> __Method_GetTransactionCountByBlockNum = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionCountByBlockNum",
        __Marshaller_NumberMessage,
        __Marshaller_NumberMessage);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> __Method_GetTransactionById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionById",
        __Marshaller_BytesMessage,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> __Method_GetTransactionInfoById = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionInfoById",
        __Marshaller_BytesMessage,
        __Marshaller_TransactionInfo);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> __Method_GenerateAddress = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAddress",
        __Marshaller_EmptyMessage,
        __Marshaller_AddressPrKeyPairMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ApiReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of WalletSolidity</summary>
    public abstract partial class WalletSolidityBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> ListWitnesses(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetPaginatedAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetNowBlock2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetBlockByNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetTransactionCountByBlockNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> GetTransactionInfoById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> GenerateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WalletSolidity</summary>
    public partial class WalletSolidityClient : grpc::ClientBase<WalletSolidityClient>
    {
      /// <summary>Creates a new client for WalletSolidity</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletSolidityClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WalletSolidity that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletSolidityClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletSolidityClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletSolidityClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccount(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccountById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account GetAccountById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account> GetAccountByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountById, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList ListWitnesses(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnesses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList ListWitnesses(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> ListWitnessesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnessesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.WitnessList> ListWitnessesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetPaginatedAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList GetPaginatedAssetIssueList(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetPaginatedAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AssetIssueList> GetPaginatedAssetIssueListAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlockAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlockAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetNowBlock2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetNowBlock2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetNowBlock2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetNowBlock2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetBlockByNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention GetBlockByNum2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetBlockByNum2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockExtention> GetBlockByNum2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage GetTransactionCountByBlockNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage GetTransactionCountByBlockNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetTransactionCountByBlockNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> GetTransactionCountByBlockNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction GetTransactionById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction GetTransactionById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Transaction> GetTransactionByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo GetTransactionInfoById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo GetTransactionInfoById(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> GetTransactionInfoByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.TransactionInfo> GetTransactionInfoByIdAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage GenerateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage GenerateAddress(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> GenerateAddressAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AddressPrKeyPairMessage> GenerateAddressAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletSolidityClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletSolidityClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WalletSolidityBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_GetAccountById, serviceImpl.GetAccountById)
          .AddMethod(__Method_ListWitnesses, serviceImpl.ListWitnesses)
          .AddMethod(__Method_GetAssetIssueList, serviceImpl.GetAssetIssueList)
          .AddMethod(__Method_GetPaginatedAssetIssueList, serviceImpl.GetPaginatedAssetIssueList)
          .AddMethod(__Method_GetNowBlock, serviceImpl.GetNowBlock)
          .AddMethod(__Method_GetNowBlock2, serviceImpl.GetNowBlock2)
          .AddMethod(__Method_GetBlockByNum, serviceImpl.GetBlockByNum)
          .AddMethod(__Method_GetBlockByNum2, serviceImpl.GetBlockByNum2)
          .AddMethod(__Method_GetTransactionCountByBlockNum, serviceImpl.GetTransactionCountByBlockNum)
          .AddMethod(__Method_GetTransactionById, serviceImpl.GetTransactionById)
          .AddMethod(__Method_GetTransactionInfoById, serviceImpl.GetTransactionInfoById)
          .AddMethod(__Method_GenerateAddress, serviceImpl.GenerateAddress).Build();
    }

  }
  public static partial class WalletExtension
  {
    static readonly string __ServiceName = "protocol.WalletExtension";

    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated> __Marshaller_AccountPaginated = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> __Marshaller_TransactionList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> __Marshaller_TransactionListExtention = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention.Parser.ParseFrom);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> __Method_GetTransactionsFromThis = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsFromThis",
        __Marshaller_AccountPaginated,
        __Marshaller_TransactionList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> __Method_GetTransactionsFromThis2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsFromThis2",
        __Marshaller_AccountPaginated,
        __Marshaller_TransactionListExtention);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> __Method_GetTransactionsToThis = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsToThis",
        __Marshaller_AccountPaginated,
        __Marshaller_TransactionList);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> __Method_GetTransactionsToThis2 = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsToThis2",
        __Marshaller_AccountPaginated,
        __Marshaller_TransactionListExtention);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ApiReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of WalletExtension</summary>
    public abstract partial class WalletExtensionBase
    {
      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> GetTransactionsFromThis(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> GetTransactionsFromThis2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> GetTransactionsToThis(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> GetTransactionsToThis2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WalletExtension</summary>
    public partial class WalletExtensionClient : grpc::ClientBase<WalletExtensionClient>
    {
      /// <summary>Creates a new client for WalletExtension</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletExtensionClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WalletExtension that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletExtensionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletExtensionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletExtensionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList GetTransactionsFromThis(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThis(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList GetTransactionsFromThis(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsFromThis, null, options, request);
      }
      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> GetTransactionsFromThisAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThisAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> GetTransactionsFromThisAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsFromThis, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention GetTransactionsFromThis2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThis2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention GetTransactionsFromThis2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsFromThis2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> GetTransactionsFromThis2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThis2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> GetTransactionsFromThis2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsFromThis2, null, options, request);
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList GetTransactionsToThis(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThis(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList GetTransactionsToThis(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsToThis, null, options, request);
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> GetTransactionsToThisAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThisAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionList> GetTransactionsToThisAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsToThis, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention GetTransactionsToThis2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThis2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention GetTransactionsToThis2(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsToThis2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> GetTransactionsToThis2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThis2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.TransactionListExtention> GetTransactionsToThis2Async(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsToThis2, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletExtensionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletExtensionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WalletExtensionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTransactionsFromThis, serviceImpl.GetTransactionsFromThis)
          .AddMethod(__Method_GetTransactionsFromThis2, serviceImpl.GetTransactionsFromThis2)
          .AddMethod(__Method_GetTransactionsToThis, serviceImpl.GetTransactionsToThis)
          .AddMethod(__Method_GetTransactionsToThis2, serviceImpl.GetTransactionsToThis2).Build();
    }

  }
  /// <summary>
  /// the api of tron's db
  /// </summary>
  public static partial class Database
  {
    static readonly string __ServiceName = "protocol.Database";

    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference> __Marshaller_BlockReference = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties> __Marshaller_DynamicProperties = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Marshaller_Block = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage> __Marshaller_NumberMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference> __Method_getBlockReference = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getBlockReference",
        __Marshaller_EmptyMessage,
        __Marshaller_BlockReference);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties> __Method_GetDynamicProperties = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDynamicProperties",
        __Marshaller_EmptyMessage,
        __Marshaller_DynamicProperties);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Method_GetNowBlock = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_EmptyMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> __Method_GetBlockByNum = new grpc::Method<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage, global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_NumberMessage,
        __Marshaller_Block);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ApiReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of Database</summary>
    public abstract partial class DatabaseBase
    {
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference> getBlockReference(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties> GetDynamicProperties(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Database</summary>
    public partial class DatabaseClient : grpc::ClientBase<DatabaseClient>
    {
      /// <summary>Creates a new client for Database</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatabaseClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Database that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatabaseClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatabaseClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatabaseClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference getBlockReference(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlockReference(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference getBlockReference(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getBlockReference, null, options, request);
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference> getBlockReferenceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlockReferenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.BlockReference> getBlockReferenceAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getBlockReference, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties GetDynamicProperties(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDynamicProperties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties GetDynamicProperties(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDynamicProperties, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties> GetDynamicPropertiesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDynamicPropertiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.DynamicProperties> GetDynamicPropertiesAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDynamicProperties, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetNowBlock(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlockAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetNowBlockAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block GetBlockByNum(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Core.Block> GetBlockByNumAsync(global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DatabaseClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatabaseClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DatabaseBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getBlockReference, serviceImpl.getBlockReference)
          .AddMethod(__Method_GetDynamicProperties, serviceImpl.GetDynamicProperties)
          .AddMethod(__Method_GetNowBlock, serviceImpl.GetNowBlock)
          .AddMethod(__Method_GetBlockByNum, serviceImpl.GetBlockByNum).Build();
    }

  }
  /// <summary>
  /// the api of tron's network such as node list.
  /// </summary>
  public static partial class Network
  {
    static readonly string __ServiceName = "protocol.Network";


    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Latoken.CurrencyProvider.Protocol.Tron.Grpc.Api.ApiReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of Network</summary>
    public abstract partial class NetworkBase
    {
    }

    /// <summary>Client for Network</summary>
    public partial class NetworkClient : grpc::ClientBase<NetworkClient>
    {
      /// <summary>Creates a new client for Network</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworkClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Network that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworkClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworkClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworkClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworkClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetworkBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder().Build();
    }

  }
}
#endregion
